#
# USB HID test
#
# By default, the run script runs interactively and reports any received USB
# input events to the console.
#
# When run with the '--autopilot' run option, the run script tests the USB
# input events generated by a 'Pro Micro' microcontroller.
#
# Pro Micro setup instructions
# ----------------------------
#
# Install prerequisites (example for Xubuntu 16.04):
#
# $ sudo apt-get install gcc-avr avr-libc avrdude
#
# Checkout and build the microcontroller software:
#
# $ git clone https://github.com/cproc/lufa.git
# $ cd lufa
# $ git checkout genode_usb_tests
# $ cd Demos/Device/ClassDriver/KeyboardMouseGenode
# $ make
#
# Connect the 'RST' pin with the 'GND' pin to hold the Pro Micro in the reset
# state.
#
# Connect the Pro Micro to the host PC
# 
# Check the device file name with 'dmesg'. If it is not 'ttyACM0', change
# 'AVRDUDE_PORT' in 'makefile' accordingly.
#
# Release the RST/GND pin connection and within the next 8 seconds run:
#
# $ make avrdude
#
# Disconnect the Pro Micro or put it into reset state again to avoid unexpected
# input events on the host PC.
#

if { [have_spec linux] || [have_spec muen] } {
	puts "Run script does not support Linux and Muen."
	exit 0
}

if { [get_cmd_switch --autopilot] && [have_include "power_on/qemu"] } {
	puts "Run script does not support autopilot mode on Qemu"
	exit 0
}

if { [get_cmd_switch --autopilot] &&
    ![have_spec rpi] &&
    ![have_spec x86]} {
	puts "Run script does not support autopilot mode on this platform"
	exit 0
}

proc usb_drv_binary { } {
	if {[have_spec rpi]} { return rpi_usb_drv }
	if {[have_spec x86]} { return usb_drv }
	return no_usb_drv_available
}

#
# Build
#

set build_components {
	core init timer
	drivers/usb
	test/input
	server/dynamic_rom
}

lappend_if [have_spec gpio] build_components drivers/gpio

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>}

append_if [have_spec gpio] config "
	<start name=\"[gpio_drv]\" caps=\"150\">
		<resource name=\"RAM\" quantum=\"4M\"/>
		<provides><service name=\"Gpio\"/></provides>
		<config/>
	</start>"

append_platform_drv_config

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="usb_drv" caps="150">
		<binary name="} [usb_drv_binary] {"/>
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config uhci="yes" ohci="yes" ehci="yes" xhci="yes"
		        capslock_led="rom" numlock_led="rom" scrlock_led="rom"
		        bios_handoff="yes">
			<hid/>
		</config>
		<route>
			<service name="ROM" label="capslock"> <child name="dynamic_rom"/> </service>
			<service name="ROM" label="numlock">  <child name="dynamic_rom"/> </service>
			<service name="ROM" label="scrlock">  <child name="dynamic_rom"/> </service>
			<service name="ROM">       <parent/>    </service>
			<service name="CPU">       <parent/>    </service>
			<service name="PD">        <parent/>    </service>
			<service name="IO_PORT">   <parent/>    </service>
			<service name="IO_MEM">    <parent/>    </service>
			<service name="IRQ">       <parent/>    </service>
			<service name="LOG">       <parent/>    </service>
			<service name="RM">        <parent/>    </service>
			<service name="Platform">  <any-child/> </service>
			<service name="Regulator"> <child name="platform_drv"/> </service>
			<service name="Timer">     <child name="timer"/> </service>
		</route>
	</start>

	<start name="dynamic_rom">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="ROM"/> </provides>
		<config verbose="no">
			<rom name="capslock">
				<inline> <capslock enabled="no"/> </inline>
				<sleep milliseconds="250" />
				<inline> <capslock enabled="yes"/> </inline>
				<sleep milliseconds="250" />
			</rom>
			<rom name="numlock">
				<inline> <numlock enabled="no"/> </inline>
				<sleep milliseconds="500" />
				<inline> <numlock enabled="yes"/> </inline>
				<sleep milliseconds="500" />
			</rom>
			<rom name="scrlock">
				<inline> <scrlock enabled="no"/> </inline>
				<sleep milliseconds="1000" />
				<inline> <scrlock enabled="yes"/> </inline>
				<sleep milliseconds="1000" />
			</rom>
		</config>
		<route>
			<service name="ROM">   <parent/>             </service>
			<service name="CPU">   <parent/>             </service>
			<service name="PD">    <parent/>             </service>
			<service name="LOG">   <parent/>             </service>
			<service name="Timer"> <child name="timer"/> </service>
		</route>
	</start>

	<start name="test-input">
		<resource name="RAM" quantum="1M"/>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core ld.lib.so init timer test-input dynamic_rom
}

append boot_modules [usb_drv_binary]
lappend_if [have_spec gpio] boot_modules [gpio_drv]

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args "  -usb  -usbdevice mouse -usbdevice keyboard"
append qemu_args " -device usb-ehci,id=ehci"
append xen_args  { usbdevice=\["mouse","keyboard"\] }

if { [have_include "power_on/qemu"] || ![get_cmd_switch --autopilot] } { run_genode_until forever }

# autopilot test

run_genode_until {\[init -\> test-input\] Input event #0\t} 60

# remove everything before the first interesting line
regexp {(\[init -\> test-input\] Input event #0\t.*)} $output all output

run_genode_until {\[init -\> test-input\] Input event #11.*\n} 40 [output_spawn_id]

# pay only attention to the output of init and its children
grep_output {^\[init }

unify_output { number [0-9]+} ""
unify_output {(?n)on usb-.*$} ""
unify_output {(?n)using .*$} ""
unify_output {(?n)^.*__wait_event.*$} ""
unify_output {(?n)^.*Failed to submit URB.*$} ""
unify_output {(?n)^.*dev_warn.*$} ""
filter_out_color_escape_sequences
trim_lines

compare_output_to {
[init -> test-input] Input event #0	PRESS KEY_X 65534	key count: 1
[init -> test-input] Input event #1	RELEASE KEY_X	key count: 0
[init -> test-input] Input event #2	PRESS BTN_LEFT 65534	key count: 1
[init -> test-input] Input event #3	REL_MOTION -1+0	key count: 1
[init -> test-input] Input event #4	REL_MOTION +0+1	key count: 1
[init -> test-input] Input event #5	RELEASE BTN_LEFT	key count: 0
[init -> usb_drv] dev_info: USB disconnect, device
[init -> usb_drv] dev_info: new full-speed USB device
[init -> usb_drv] dev_info: D L
[init -> usb_drv] dev_info: input: USB HID v1.11 Keyboard [D L]
[init -> usb_drv] dev_info: D L
[init -> usb_drv] dev_info: input: USB HID v1.11 Mouse [D L]
[init -> test-input] Input event #6	PRESS KEY_X 65534	key count: 1
[init -> test-input] Input event #7	RELEASE KEY_X	key count: 0
[init -> test-input] Input event #8	PRESS BTN_LEFT 65534	key count: 1
[init -> test-input] Input event #9	REL_MOTION -1+0	key count: 1
[init -> test-input] Input event #10	REL_MOTION +0+1	key count: 1
[init -> test-input] Input event #11	RELEASE BTN_LEFT	key count: 0
}
